rm(tmp0)
return(ret)
}
match.inbound <- function(snp.pos, names, snpnames, filter, genes, space) {
# match the =right= column of snp pos, using the names from the left
# why? because:
# snppos.1 snppos.2 snpid.1 snpid.2
# 10       1000     rs1(on chip)     rs2(not on chip)
# rs1 ~ rs2, but rs2 is not on the chip, take the name of rs2 to get its p-value
# snps must be unique but the names are not, because they replace snps with
# on in linkage disequilibrium
# if there is nothing match then we can get off here
if (length(filter) < 1 || sum(filter) < 1)
return ( NULL )
# we to keep the snps in line in the names vector
names <- names[filter]
# for reasons of debugging make unique names
snpsadd = RangedData(
IRanges(start=snp.pos[filter], width=1, names=make.names(names, unique=TRUE) ),
space=space,
nu.names=names
)
#print (snpsadd)
# the scoring function expects matches per chromosome, even if there is only
# one space in the matched list
# the indices of the genes should be ok then
ol1 <- as.matrix (findOverlaps(query=snpsadd, subject=genes, select="all")[[space]])
# add these matches to the initial match matrix,
# therefore, we have to match the snpnames to the positions in the
# chip snps, the genes are the same as before so we can leave them
# 1. get the names of the snps:
rn <- names[ol1[,"queryHits"]]
# 2. match the names with the global snps
# and replace them, there cannot be any missing because we tested for them before
ol1[,"queryHits"] <- match(rn, snpnames)
# ol1 now must be made unique again
ol1 <- unique(ol1)
cat(paste("number of inbound overlaps unique:",nrow(ol1),"\n"))
return (ol1)
}
# compute the combined weights,
# internal function
compute.weights <- function(matched.ranges, snps, genes, ld.hdf.file=NULL, population=NULL, ld.cutoff=0.8, fun, full.match=FALSE, comparator = get(">="), use.position, ld.structure = ld.structure, correction.type = correction.type, ...) {
# the datasets in the ld data list must have the same names as the spaces
if (! is.null(ld.hdf.file)) {
# add a global position vector
genes$"gpos" <-  1:nrow(genes)
gscore = rep(NA, nrow(genes))
for (m in 1:length(matched.ranges)) {
# cannot load all ld data at once, so we have to go space by space
space = names(matched.ranges[m])
print (paste("processing space",space))
if (! space %in% names(genes)) {
cat (paste("space", space, "not present in gene space, skipping\n"))
next
}
snp.space = snps[space]
gene.space = genes[space]
matchmat = as.matrix(matched.ranges[[m]])
print(paste("got", dim(matchmat), "matches"))
snpnames = as.character(rownames(snp.space)) # a bit faster not to load the names all the time
if (is.null(snpnames))
stop ("All SNPs need valid rs-snp ids to run LD analysis")
ldmatch = load.ld(chrom.name=space, population=population, snp.space, hdf5.file=ld.hdf.file, max.pairs=1E6, cutoff=ld.cutoff, sim=FALSE, full.match=full.match, comparator=comparator, use.position=use.position )
# ldmatch=NULL
if (!is.null(ldmatch)) {
# something is found
# exchange the identifiers of the ld data with the numeric match indices
print ("matching ids on chip:")
print (length(ldmatch[[1]]))
# print(head(ldmatch[[1]]))
# print(head(ldmatch[[2]]))
print(head(snpnames))
rs1 = match(as.character(ldmatch[[1]]), snpnames)
rs2 = match(as.character(ldmatch[[2]]), snpnames)
# print(cbind(rs1,rs2))
# remove NA from non-matching snps,
# they have to be matched back by crossmatching
tmp =  ! (is.na(rs1) | is.na(rs2))
if ( sum((tmp)) <= 0 ) warning("Nothing matched! Incompatible SNP coordinates?")
rs1 = rs1[tmp]
rs2 = rs2[tmp]
print("reduced to")
print(length(rs1))
# boil down:
# remove those, which are not in "query"
print("boiling down to:")
query = as.numeric(matchmat[,"queryHits"])
ind =  ( ( rs1 %in% query ) | (rs2 %in% query) )
print (length(ind))
rs1 = as.numeric(rs1[ind])
rs2 = as.numeric(rs2[ind])
print("making unique pairs...")
crossmat = unique( rbind (cbind(rs1,rs2), cbind(rs2,rs1) ) )
print (dim(crossmat))
print("added value...")
## make two crossmatching lists for fast query:
addedv = split(f=crossmat[,1], crossmat[,2])
print("value, not NA:")
## extend the match matrix: this needs some dirty tricks:
addedv2 = addedv[match(as.character(query), names(addedv))]
# need to remove data later
fint = which( ! is.na(names(addedv2)))
print(length(fint))
# list has length of 'query' and the same order as the matchmatrix
# with some missing values, but the
# names are still wrong, so replace them with the gene names
genenams =  as.character(matchmat[,"subjectHits"])
names(addedv2) <- genenams
# now we can remove the empty entries,
# the list now associates genes and added snps
addedv3 = addedv2[fint]
print (paste("length of added value: ", length(addedv3)))
# the list names are geneids and not unique
print ("double split")
spl2 = split(addedv3, names(addedv3)) # split on listnames to get these into the list, BAD TRICK!
# make a match gene matrix by repeating the gene
print ("extend match matrix")
ret = lapply(spl2, function(x) {
as.matrix( cbind(unlist(x), rep(names(x)[1], length(unlist(x))) ) )
}
)
# add crossmatching, therefore we need to overlap backwards again
# This step is equivalent to simple crossmatch, if and only if:
# All LD snps in the LD data are also on the chip
if (full.match) {
cat("doing inbound matching\n")
# we need both the matches to filter
match.back.1 <- ldmatch[[1]] %in% snpnames
match.back.2 <- ldmatch[[2]] %in% snpnames
# we seek the pairs where exactly one partner is on the chip,
# if both are on the chip, we have already matched outbound:
# Done: if only inbound matching is applied, then
# crossmatch has to be OR because otherwise we would loose these cases
# Done: implement inbound/outbound strategy separatly
crossmatch = xor(match.back.1, match.back.2)
# this gives us a reduced overlap index
# reduce the data further:
match.back.1 <- match.back.1 & crossmatch
match.back.2 <- match.back.2 & crossmatch
ol1 <-  match.inbound(ldmatch[[4]], ldmatch[[1]], snpnames, match.back.1, genes, space)
ol2 <-  match.inbound(ldmatch[[3]], ldmatch[[2]], snpnames, match.back.2, genes, space)
# this can be added to the match.matrix:
matchmat <- rbind(matchmat,ol1, ol2)
}
print ("extend step2")
#lapply(ret, function(x) { #matchmat <<- rbind(matchmat, x);})
# add all results to the match matrix
matchmat <-  rbind(matchmat, do.call(rbind, ret))
print(paste("after extension got", nrow(matchmat), "matches"))
#
matchmat <- unique(matchmat)
print (paste("after uniquifying got", nrow(matchmat), "matches"))
}
print("add to scoring")
gscore =  do.score2(matchmat, genes, gene.space, snp.space, fun, gscore, correction.type, ld.structure, ...)
}
# assign score vector to genome:
genes$"score.data" <- unlist(gscore)
return(genes)
} else {
# print(matched.ranges)
tmp = as.matrix(matched.ranges)
# print(dim(tmp))
return (do.score(tmp, genes, snps, fun, correction.type, ld.structure, ...))
}
}
# rbinds a list of matrices together, all matrices must have
# the same number of columns
# this is faster than using an intermediate dataframe
# a simple test:
# bla = list(a=(matrix(1:55,nrow=1E4,ncol=2,by=T)), b=(matrix(1:7,nrow=1E4,ncol=2,by=T)))
# all (list.rbind(bla) == rbind(bla[[1]],bla[[2]]))
#should be true
list.rbind <- function(matlist) {
ncol = ncol(matlist[[1]])
matlist = lapply(matlist,t)
return ( t(matrix(unlist(matlist), nrow=ncol, byrow=F)) )
}
# compute combined scores given a whole match matrix object
# for the non-LD case
do.score <- function (match.mat, genes, snps, fun, correction.type, ld.structure, ...) {
## claculate the combined score
## get the p-values
print ("get scores....")
scorevect = rep(NA, nrow(genes))
match.mat= as.matrix(match.mat)
nu.nams = rownames(snps)
##add chr and bp
chr.nams = as.numeric(as.character(snps$space))
bp.nams = data.frame(snps$ranges)$start
#tmp = data.frame(match.mat, score=score( snps[as.numeric(match.mat[,"queryHits"]),]), snp.ids=( rownames( snps[as.numeric(match.mat[,"queryHits"]),]) ) )
#####12.11.2014. include chr and bp
tmp = data.frame(match.mat, score=score( snps[as.numeric(match.mat[,"queryHits"]),]),
snp.ids = nu.nams[as.numeric(match.mat[,"queryHits"])], snp.chr = chr.nams[as.numeric(match.mat[,"queryHits"])], snp.bp = bp.nams[as.numeric(match.mat[,"queryHits"])], row.names=NULL )
## split p-values by gene (subject)
print("split...")
if ( ( ! is.null (body(fun)))
&& ( length (body(fun)) == length(body(get.snps)) )
&& all(body(fun) == body(get.snps)))
{
print ("using snp names instead of score")
splitti = split(tmp$snp.ids, f=tmp$subjectHits)
} else {
splitti = split(tmp$score, f=tmp$subjectHits)
splitti.chr = split(tmp$snp.chr, f=tmp$subjectHits)
splitti.bp = split(tmp$snp.bp, f=tmp$subjectHits)
}
rm (tmp)
## apply the combination function
print("before sapply")
if (is.na(pmatch("cor.array",formalArgs(fun))))
{
tmp2 = lapply(splitti, fun, ...)
}
else{
##splitti.chr and splitti.bp to function func.r2
##create r2 matrix and merge list of pvals with the list of matrixes
##
## print("merge coordinates...")
coor<-cbind(splitti.chr, splitti.bp)
cor.array<-list()
if (ld.structure){
cor.array<-mapply(func_r2, splitti.chr, splitti.bp)
}else{
cor.array<-mapply(func_r2_est, splitti, splitti.bp)##mapply(func_r2, splitti.chr, splitti.bp)
}
tmp2<-mapply(fun, splitti, cor.array, correction.type)#list()
}
rm(splitti)
print("getting index")
## assign it to the right positions in the scorevector
ind = as.numeric(names(tmp2))
print("add to scorevect")
scorevect[ind] <- tmp2
stopifnot(length(ind) == length(tmp2))
genes$"score.data" <- unlist(scorevect)
## the scorevector contains all gene scores  and can be attached to the genes
return (genes)
}
## do the combined score and return a score vector
## applied for each chromosome/space and a match matrix made
## from ranges lists
## the gene space needs a gpos field denoting the absolute position
## of the Range
## takes and returns a scorevector
do.score2 <- function (match.mat, global.genes, local.genes, local.snps, fun, score.vector, correction.type, ld.structure, ...) {
# claculate the combined score
# get the p-values
print ("get scores 2....")
stopifnot( nrow(global.genes) == length(score.vector))
if (any (is.na(local.genes$gpos)) || any (is.null(local.genes$gpos)))
stop("all ranges need a global position attribute(gpos)")
match.mat = as.matrix(match.mat)
nu.nams = rownames(local.snps)
##add chr and bp
chr.nams = as.numeric(as.character(local.snps$space))
bp.nams = data.frame(local.snps$ranges)$start
#tmp = data.frame(match.mat, score=score( local.snps[as.numeric(match.mat[,"queryHits"]),]),
#  snp.ids = nu.nams[as.numeric(match.mat[,"queryHits"])], row.names=NULL )
#                                      # split p-values by gene (subject)
#####12.11.2014. include chr and bp
tmp = data.frame(match.mat, score=score( local.snps[as.numeric(match.mat[,"queryHits"]),]),
snp.ids = nu.nams[as.numeric(match.mat[,"queryHits"])], snp.chr = chr.nams[as.numeric(match.mat[,"queryHits"])], snp.bp = bp.nams[as.numeric(match.mat[,"queryHits"])], row.names=NULL )
# split p-values by gene (subject)
print("split...")
if ( ( ! is.null (body(fun)))
&& ( length (body(fun)) == length(body(get.snps)) )
&& all(body(fun) == body(get.snps))) {
print ("using snp names instead of score")
splitti = split(tmp$snp.ids, f=tmp$subjectHits)
} else {
splitti = split(tmp$score, f=tmp$subjectHits)
splitti.chr = split(tmp$snp.chr, f=tmp$subjectHits)
splitti.bp = split(tmp$snp.bp, f=tmp$subjectHits)
}
#rm (tmp)
# apply the combination function
# print("before sapply")
if (is.na(pmatch("cor.array",formalArgs(fun))))
{  tmp2 = lapply(splitti, fun, ...)
} else{
##splitti.chr and splitti.bp to function func.r2
##create r2 matrix and merge list of pvals with the list of matrixes
##
coor<-cbind(splitti.chr, splitti.bp)
if (ld.structure){
cor.array<-mapply(func_r2, splitti.chr, splitti.bp)
}else{
cor.array<-mapply(func_r2_est, splitti, splitti.bp)##mapply(func_r2, splitti.chr, splitti.bp)
}
tmp2<-mapply(fun, splitti, cor.array, correction.type)
}
#rm(splitti)
print("getting index")
# assign it to the right positions in the scorevector
ind = as.integer(names(tmp2))
# the index is the names of the local.genes in chromosome
# as split might have reordered completely, we have to re-order it
global.ind = local.genes[ind,]$gpos
if (length(global.ind) != length(tmp2))
stop (paste("different length in scores: gind: ",length(global.ind),"tmp ", length(tmp2) ))
print("add to scorevect")
score.vector[global.ind] <- tmp2
# genes$"score.data" <- scorevect
# the scorevector contains all gene scores  and can be attached to the genes
return (score.vector)
}
#######################################################################################################################################
func_r2<-function(chr, bp){
chr<-as.numeric(chr)
bp<-as.numeric(bp)
if (length(bp)>1){
print(bp[1])
##new separation
if (length(bp)>=200){
cor.array<-mat.or.vec(length(bp),length(bp))
for (l in 1:(ceiling(length(bp)/100))){
start.bp<-(1+(l-1)*100)
end.bp<-  min(length(bp), (100+(l-1)*100))
coor<-bp[start.bp:end.bp]
matrix<-load.ld.matrix.2(hdf5.file=LD,chrom.name=chr[1], pos=coor)
index<-match(bp[start.bp:end.bp], row.names(matrix))
smallmat<-matrix[index,index]
cor.array[start.bp:end.bp,start.bp:end.bp]<-smallmat}
}else{
matrix<-load.ld.matrix.2(hdf5.file=LD,chrom.name=chr[1], pos=bp)
index<-match(bp, row.names(matrix))
cor.array<-matrix[index,index]}
}else{
cor.array<-1
}
return(cor.array)
}
#######################################################################################################################################
load.ld.matrix.2 <- function(chrom.name=NULL, population="EUR", hdf5.file=NA, positions=NA, verbose=F, rsprefix="rs") {
positions<-sort(positions)
if (is.na(hdf5.file)) {  print("NA hdf5 file"); return (NULL) }
#if (anyNA(positions)) { print("NA positions"); return(NULL) }
dsnams = as.vector(h5ls(LD)[[1]])       ##hdf5dir(file=hdf5.file, paste("/", population, sep=""))
if (!(paste("/", population,"/", chrom.name, sep="") %in% dsnams) ) {
cat(file=stderr(),paste("Chromosome", chrom.name, "in population", population, "not matched\n"))
return(NULL)
}
ld.slice.name <- paste("/", population, "/", chrom.name , sep="")
# get the data with low memory profile
print ( paste("Loading ld data positions for", ld.slice.name))
tmp<-h5read(file=hdf5.file, ld.slice.name)
snp.pairs = list(
pos1 = tmp[[1]],
pos2 = tmp[[2]]
)
print ( paste("Selecting associations for",length(positions),'snps on chromosome',chrom.name) )
selection = (( snp.pairs[[1]] %in% positions & snp.pairs[[2]] %in% positions ))
# make matrix of indexes
pos1.sel = snp.pairs[[1]][selection]
pos2.sel = snp.pairs[[2]][selection]
m<-matrix(rep(NA,length(positions)**2),nc=length(positions))
for (i in 1:length(positions)) {
for (j in 1:length(positions)) {
if (verbose) {
#cat(length(new.row),'.',fill=F,sep='')
cat('.',fill=F,sep='')
}
if (i == j) {
m[i,j] <- NA
next
}
if ( sum(positions[i] == pos1.sel & positions[j] == pos2.sel) >= 1 ) {
if (sum(positions[i] == pos1.sel & positions[j] == pos2.sel) > 1) { print("Multiple associations!!!")
tmp0 <- which(selection)[which(pos1.sel == positions[i] & pos2.sel == positions[j])]
m[i,j]<-tmp0[1]}else{
m[i,j] <- which(selection)[which(pos1.sel == positions[i] & pos2.sel == positions[j])]}
m[j,i]<-m[i,j]
}
}
}
#cross matrix.selection with assoc
assoc = tmp$value.set[as.vector(m)]
rm(tmp)
if (length(pos1.sel)>0){
ret = matrix(assoc, nr=length(positions), nc=length(positions))
}else{ret<-mat.or.vec(length(positions),length(positions))}
# make result matrix
ret[is.na(ret)]<-0
rownames(ret)<-positions
colnames(ret)<-positions
# set the diagonal
diag(ret) <- 1.0
return(ret)
}
############################
func_r2_est<-function(p,bp){
p<-as.numeric(p)
bp<-as.numeric(bp)
if (length(p)>1){
c<-mat.or.vec(length(p),length(p))
diag(c)<-1
for (i in 1:(length(p)-1)){
for (j in (i+1):(length(p)))
{
if (abs(bp[i]-bp[j])<500000){
c[i,j]<-min(p[i],p[j])/max(p[i],p[j])
c[j,i]<-c[i,j]
}
}
}
}else{c<-1}
return(c)
}
scoring.function <- match.arg(scoring.function)
correction.type<-match.arg(correction.type)
comparator <-  match.arg(comparator)
comparator <- getMethod(comparator)
flank.genes.right <- as.integer(flank.genes.right)
flank.genes.left <- as.integer(flank.genes.left)
library(LDsnpR)
example()
library(LDsnpR)
example
example()
library(LDsnpR)
example
example()
example.genome.url <-   system.file("data/ENSEMBL66_gene_bld37_example.txt", package="LDsnpR")
example.snpdata.url <-  system.file("data/pgc2_scz_chr18_example.txt", package="LDsnpR")
example.ld.file  <- system.file("data/chr18_LD1kgEUR.h5", package="LDsnpR")
snp.ld.analysis(snpdata.url = example.snpdata.url,
genome.url = example.genome.url,
ld.data.hdf.url = example.ld.file,
use.position = TRUE,
ld.rho.cutoff=0.8,
comparator=">=",
full.match=FALSE,
flank.genes.left=10000,
flank.genes.right=10000,
population = "EUR",
scoring.function = c("sidak"),
ld.structure = TRUE,
correction.type = c("Moskvina"),
genome.name="hg19",
outfile.path=NULL)
library(LDsnpR)
example.ld.file
example()
library(LDsnpR)
example()
library(LDsnpR)
library(LDsnpR)
example()
library(LDsnpR)
example()
library(LDsnpR)
example()
library(LDsnpR)
example()
library(LDsnpR)
library(LDsnpR)
library(LDsnpR)
library(hekp = LDsnpR)
library(help = LDsnpR)
library("LDsnpR", lib.loc="~/R/win-library/3.2")
?snp.ld.analysis
library(LDsnpR)
library(LDsnpR)
library(LDsnpR)
library(LDsnpR)
library(LDsnpR)
library(LDsnpR)
library(LDsnpR)
library(LDsnpR)
library(LDsnpR)
library(LDsnpR)
library(LDsnpR)
library(LDsnpR)
library(LDsnpR)
library(LDsnpR)
example
example()
library(LDsnpR)
example()
library(LDsnpR)
example()
library(LDsnpR)
example()
library(LDsnpR)
example()
library(LDsnpR)
example()
library(LDsnpR)
example()
library(LDsnpR)
example()
library(LDsnpR)
example()
library(LDsnpR)
example()
library(LDsnpR)
example()
library(LDsnpR)
library(LDsnpR)
example()
library(LDsnpR)
example()
library(LDsnpR)
example()
library(LDsnpR)
example()
library(LDsnpR)
library(LDsnpR)
example()
library(LDsnpR)
